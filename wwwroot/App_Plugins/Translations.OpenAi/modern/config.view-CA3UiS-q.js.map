{"version":3,"file":"config.view-CA3UiS-q.js","sources":["../../../../openai-client/src/api/core/ApiError.ts","../../../../openai-client/src/api/core/CancelablePromise.ts","../../../../openai-client/src/api/core/request.ts","../../../../openai-client/src/api/services.gen.ts","../../../../openai-client/src/views/config.view.ts"],"sourcesContent":["import type { ApiRequestOptions } from \"./ApiRequestOptions\";\nimport type { ApiResult } from \"./ApiResult\";\n\nexport class ApiError extends Error {\n  public readonly url: string;\n  public readonly status: number;\n  public readonly statusText: string;\n  public readonly body: unknown;\n  public readonly request: ApiRequestOptions;\n\n  constructor(\n    request: ApiRequestOptions,\n    response: ApiResult,\n    message: string,\n  ) {\n    super(message);\n\n    this.name = \"ApiError\";\n    this.url = response.url;\n    this.status = response.status;\n    this.statusText = response.statusText;\n    this.body = response.body;\n    this.request = request;\n  }\n}\n","export class CancelError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"CancelError\";\n  }\n\n  public get isCancelled(): boolean {\n    return true;\n  }\n}\n\nexport interface OnCancel {\n  readonly isResolved: boolean;\n  readonly isRejected: boolean;\n  readonly isCancelled: boolean;\n\n  (cancelHandler: () => void): void;\n}\n\nexport class CancelablePromise<T> implements Promise<T> {\n  private _isResolved: boolean;\n  private _isRejected: boolean;\n  private _isCancelled: boolean;\n  readonly cancelHandlers: (() => void)[];\n  readonly promise: Promise<T>;\n  private _resolve?: (value: T | PromiseLike<T>) => void;\n  private _reject?: (reason?: unknown) => void;\n\n  constructor(\n    executor: (\n      resolve: (value: T | PromiseLike<T>) => void,\n      reject: (reason?: unknown) => void,\n      onCancel: OnCancel,\n    ) => void,\n  ) {\n    this._isResolved = false;\n    this._isRejected = false;\n    this._isCancelled = false;\n    this.cancelHandlers = [];\n    this.promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n\n      const onResolve = (value: T | PromiseLike<T>): void => {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._isResolved = true;\n        if (this._resolve) this._resolve(value);\n      };\n\n      const onReject = (reason?: unknown): void => {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this._isRejected = true;\n        if (this._reject) this._reject(reason);\n      };\n\n      const onCancel = (cancelHandler: () => void): void => {\n        if (this._isResolved || this._isRejected || this._isCancelled) {\n          return;\n        }\n        this.cancelHandlers.push(cancelHandler);\n      };\n\n      Object.defineProperty(onCancel, \"isResolved\", {\n        get: (): boolean => this._isResolved,\n      });\n\n      Object.defineProperty(onCancel, \"isRejected\", {\n        get: (): boolean => this._isRejected,\n      });\n\n      Object.defineProperty(onCancel, \"isCancelled\", {\n        get: (): boolean => this._isCancelled,\n      });\n\n      return executor(onResolve, onReject, onCancel as OnCancel);\n    });\n  }\n\n  get [Symbol.toStringTag]() {\n    return \"Cancellable Promise\";\n  }\n\n  public then<TResult1 = T, TResult2 = never>(\n    onFulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onRejected?: ((reason: unknown) => TResult2 | PromiseLike<TResult2>) | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.promise.then(onFulfilled, onRejected);\n  }\n\n  public catch<TResult = never>(\n    onRejected?: ((reason: unknown) => TResult | PromiseLike<TResult>) | null,\n  ): Promise<T | TResult> {\n    return this.promise.catch(onRejected);\n  }\n\n  public finally(onFinally?: (() => void) | null): Promise<T> {\n    return this.promise.finally(onFinally);\n  }\n\n  public cancel(): void {\n    if (this._isResolved || this._isRejected || this._isCancelled) {\n      return;\n    }\n    this._isCancelled = true;\n    if (this.cancelHandlers.length) {\n      try {\n        for (const cancelHandler of this.cancelHandlers) {\n          cancelHandler();\n        }\n      } catch (error) {\n        console.warn(\"Cancellation threw an error\", error);\n        return;\n      }\n    }\n    this.cancelHandlers.length = 0;\n    if (this._reject) this._reject(new CancelError(\"Request aborted\"));\n  }\n\n  public get isCancelled(): boolean {\n    return this._isCancelled;\n  }\n}\n","import { ApiError } from \"./ApiError\";\nimport type { ApiRequestOptions } from \"./ApiRequestOptions\";\nimport type { ApiResult } from \"./ApiResult\";\nimport { CancelablePromise } from \"./CancelablePromise\";\nimport type { OnCancel } from \"./CancelablePromise\";\nimport type { OpenAPIConfig } from \"./OpenAPI\";\n\nexport const isString = (value: unknown): value is string => {\n  return typeof value === \"string\";\n};\n\nexport const isStringWithValue = (value: unknown): value is string => {\n  return isString(value) && value !== \"\";\n};\n\nexport const isBlob = (value: any): value is Blob => {\n  return value instanceof Blob;\n};\n\nexport const isFormData = (value: unknown): value is FormData => {\n  return value instanceof FormData;\n};\n\nexport const base64 = (str: string): string => {\n  try {\n    return btoa(str);\n  } catch (err) {\n    // @ts-ignore\n    return Buffer.from(str).toString(\"base64\");\n  }\n};\n\nexport const getQueryString = (params: Record<string, unknown>): string => {\n  const qs: string[] = [];\n\n  const append = (key: string, value: unknown) => {\n    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n  };\n\n  const encodePair = (key: string, value: unknown) => {\n    if (value === undefined || value === null) {\n      return;\n    }\n\n    if (value instanceof Date) {\n      append(key, value.toISOString());\n    } else if (Array.isArray(value)) {\n      value.forEach((v) => encodePair(key, v));\n    } else if (typeof value === \"object\") {\n      Object.entries(value).forEach(([k, v]) => encodePair(`${key}[${k}]`, v));\n    } else {\n      append(key, value);\n    }\n  };\n\n  Object.entries(params).forEach(([key, value]) => encodePair(key, value));\n\n  return qs.length ? `?${qs.join(\"&\")}` : \"\";\n};\n\nconst getUrl = (config: OpenAPIConfig, options: ApiRequestOptions): string => {\n  const encoder = config.ENCODE_PATH || encodeURI;\n\n  const path = options.url\n    .replace(\"{api-version}\", config.VERSION)\n    .replace(/{(.*?)}/g, (substring: string, group: string) => {\n      if (options.path?.hasOwnProperty(group)) {\n        return encoder(String(options.path[group]));\n      }\n      return substring;\n    });\n\n  const url = config.BASE + path;\n  return options.query ? url + getQueryString(options.query) : url;\n};\n\nexport const getFormData = (\n  options: ApiRequestOptions,\n): FormData | undefined => {\n  if (options.formData) {\n    const formData = new FormData();\n\n    const process = (key: string, value: unknown) => {\n      if (isString(value) || isBlob(value)) {\n        formData.append(key, value);\n      } else {\n        formData.append(key, JSON.stringify(value));\n      }\n    };\n\n    Object.entries(options.formData)\n      .filter(([, value]) => value !== undefined && value !== null)\n      .forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach((v) => process(key, v));\n        } else {\n          process(key, value);\n        }\n      });\n\n    return formData;\n  }\n  return undefined;\n};\n\ntype Resolver<T> = (options: ApiRequestOptions<T>) => Promise<T>;\n\nexport const resolve = async <T>(\n  options: ApiRequestOptions<T>,\n  resolver?: T | Resolver<T>,\n): Promise<T | undefined> => {\n  if (typeof resolver === \"function\") {\n    return (resolver as Resolver<T>)(options);\n  }\n  return resolver;\n};\n\nexport const getHeaders = async <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions<T>,\n): Promise<Headers> => {\n  const [token, username, password, additionalHeaders] = await Promise.all([\n    // @ts-ignore\n    resolve(options, config.TOKEN),\n    // @ts-ignore\n    resolve(options, config.USERNAME),\n    // @ts-ignore\n    resolve(options, config.PASSWORD),\n    // @ts-ignore\n    resolve(options, config.HEADERS),\n  ]);\n\n  const headers = Object.entries({\n    Accept: \"application/json\",\n    ...additionalHeaders,\n    ...options.headers,\n  })\n    .filter(([, value]) => value !== undefined && value !== null)\n    .reduce(\n      (headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n      }),\n      {} as Record<string, string>,\n    );\n\n  if (isStringWithValue(token)) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  if (isStringWithValue(username) && isStringWithValue(password)) {\n    const credentials = base64(`${username}:${password}`);\n    headers[\"Authorization\"] = `Basic ${credentials}`;\n  }\n\n  if (options.body !== undefined) {\n    if (options.mediaType) {\n      headers[\"Content-Type\"] = options.mediaType;\n    } else if (isBlob(options.body)) {\n      headers[\"Content-Type\"] = options.body.type || \"application/octet-stream\";\n    } else if (isString(options.body)) {\n      headers[\"Content-Type\"] = \"text/plain\";\n    } else if (!isFormData(options.body)) {\n      headers[\"Content-Type\"] = \"application/json\";\n    }\n  }\n\n  return new Headers(headers);\n};\n\nexport const getRequestBody = (options: ApiRequestOptions): unknown => {\n  if (options.body !== undefined) {\n    if (\n      options.mediaType?.includes(\"application/json\") ||\n      options.mediaType?.includes(\"+json\")\n    ) {\n      return JSON.stringify(options.body);\n    } else if (\n      isString(options.body) ||\n      isBlob(options.body) ||\n      isFormData(options.body)\n    ) {\n      return options.body;\n    } else {\n      return JSON.stringify(options.body);\n    }\n  }\n  return undefined;\n};\n\nexport const sendRequest = async (\n  config: OpenAPIConfig,\n  options: ApiRequestOptions,\n  url: string,\n  body: any,\n  formData: FormData | undefined,\n  headers: Headers,\n  onCancel: OnCancel,\n): Promise<Response> => {\n  const controller = new AbortController();\n\n  let request: RequestInit = {\n    headers,\n    body: body ?? formData,\n    method: options.method,\n    signal: controller.signal,\n  };\n\n  if (config.WITH_CREDENTIALS) {\n    request.credentials = config.CREDENTIALS;\n  }\n\n  for (const fn of config.interceptors.request._fns) {\n    request = await fn(request);\n  }\n\n  onCancel(() => controller.abort());\n\n  return await fetch(url, request);\n};\n\nexport const getResponseHeader = (\n  response: Response,\n  responseHeader?: string,\n): string | undefined => {\n  if (responseHeader) {\n    const content = response.headers.get(responseHeader);\n    if (isString(content)) {\n      return content;\n    }\n  }\n  return undefined;\n};\n\nexport const getResponseBody = async (response: Response): Promise<unknown> => {\n  if (response.status !== 204) {\n    try {\n      const contentType = response.headers.get(\"Content-Type\");\n      if (contentType) {\n        const binaryTypes = [\n          \"application/octet-stream\",\n          \"application/pdf\",\n          \"application/zip\",\n          \"audio/\",\n          \"image/\",\n          \"video/\",\n        ];\n        if (\n          contentType.includes(\"application/json\") ||\n          contentType.includes(\"+json\")\n        ) {\n          return await response.json();\n        } else if (binaryTypes.some((type) => contentType.includes(type))) {\n          return await response.blob();\n        } else if (contentType.includes(\"multipart/form-data\")) {\n          return await response.formData();\n        } else if (contentType.includes(\"text/\")) {\n          return await response.text();\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  return undefined;\n};\n\nexport const catchErrorCodes = (\n  options: ApiRequestOptions,\n  result: ApiResult,\n): void => {\n  const errors: Record<number, string> = {\n    400: \"Bad Request\",\n    401: \"Unauthorized\",\n    402: \"Payment Required\",\n    403: \"Forbidden\",\n    404: \"Not Found\",\n    405: \"Method Not Allowed\",\n    406: \"Not Acceptable\",\n    407: \"Proxy Authentication Required\",\n    408: \"Request Timeout\",\n    409: \"Conflict\",\n    410: \"Gone\",\n    411: \"Length Required\",\n    412: \"Precondition Failed\",\n    413: \"Payload Too Large\",\n    414: \"URI Too Long\",\n    415: \"Unsupported Media Type\",\n    416: \"Range Not Satisfiable\",\n    417: \"Expectation Failed\",\n    418: \"Im a teapot\",\n    421: \"Misdirected Request\",\n    422: \"Unprocessable Content\",\n    423: \"Locked\",\n    424: \"Failed Dependency\",\n    425: \"Too Early\",\n    426: \"Upgrade Required\",\n    428: \"Precondition Required\",\n    429: \"Too Many Requests\",\n    431: \"Request Header Fields Too Large\",\n    451: \"Unavailable For Legal Reasons\",\n    500: \"Internal Server Error\",\n    501: \"Not Implemented\",\n    502: \"Bad Gateway\",\n    503: \"Service Unavailable\",\n    504: \"Gateway Timeout\",\n    505: \"HTTP Version Not Supported\",\n    506: \"Variant Also Negotiates\",\n    507: \"Insufficient Storage\",\n    508: \"Loop Detected\",\n    510: \"Not Extended\",\n    511: \"Network Authentication Required\",\n    ...options.errors,\n  };\n\n  const error = errors[result.status];\n  if (error) {\n    throw new ApiError(options, result, error);\n  }\n\n  if (!result.ok) {\n    const errorStatus = result.status ?? \"unknown\";\n    const errorStatusText = result.statusText ?? \"unknown\";\n    const errorBody = (() => {\n      try {\n        return JSON.stringify(result.body, null, 2);\n      } catch (e) {\n        return undefined;\n      }\n    })();\n\n    throw new ApiError(\n      options,\n      result,\n      `Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`,\n    );\n  }\n};\n\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = <T>(\n  config: OpenAPIConfig,\n  options: ApiRequestOptions<T>,\n): CancelablePromise<T> => {\n  return new CancelablePromise(async (resolve, reject, onCancel) => {\n    try {\n      const url = getUrl(config, options);\n      const formData = getFormData(options);\n      const body = getRequestBody(options);\n      const headers = await getHeaders(config, options);\n\n      if (!onCancel.isCancelled) {\n        let response = await sendRequest(\n          config,\n          options,\n          url,\n          body,\n          formData,\n          headers,\n          onCancel,\n        );\n\n        for (const fn of config.interceptors.response._fns) {\n          response = await fn(response);\n        }\n\n        const responseBody = await getResponseBody(response);\n        const responseHeader = getResponseHeader(\n          response,\n          options.responseHeader,\n        );\n\n        let transformedBody = responseBody;\n        if (options.responseTransformer && response.ok) {\n          transformedBody = await options.responseTransformer(responseBody);\n        }\n\n        const result: ApiResult = {\n          url,\n          ok: response.ok,\n          status: response.status,\n          statusText: response.statusText,\n          body: responseHeader ?? transformedBody,\n        };\n\n        catchErrorCodes(options, result);\n\n        resolve(result.body);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n","// This file is auto-generated by @hey-api/openapi-ts\n\nimport type { CancelablePromise } from \"./core/CancelablePromise\";\nimport { OpenAPI } from \"./core/OpenAPI\";\nimport { request as __request } from \"./core/request\";\nimport type {\n  OpenAiTranslateModelsResponse,\n  OpenAiTranslateServicesResponse,\n} from \"./types.gen\";\n\n/**\n * @returns string OK\n * @throws ApiError\n */\nexport const openAiTranslateModels =\n  (): CancelablePromise<OpenAiTranslateModelsResponse> => {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/umbraco/tm-openai/api/v1/Models\",\n    });\n  };\n\n/**\n * @returns string OK\n * @throws ApiError\n */\nexport const openAiTranslateServices =\n  (): CancelablePromise<OpenAiTranslateServicesResponse> => {\n    return __request(OpenAPI, {\n      method: \"GET\",\n      url: \"/umbraco/tm-openai/api/v1/Services\",\n    });\n  };\n","import { JUMOO_TM_CONNECTOR_SETTINGS_CONTEXT, TranslationConnectorConfigElement, TranslationConnectorConfigElementBase, TranslationConnectorSettingsContext } from \"@jumoo/translate\";\r\nimport { css, customElement, html } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { openAiTranslateModels } from \"../api\";\r\n\r\n@customElement(\"jumoo-openai-config\")\r\nexport class TranslationOpenAiConnectorConfigElement \r\n    extends TranslationConnectorConfigElementBase\r\n    implements TranslationConnectorConfigElement \r\n    {    \r\n        #context?: TranslationConnectorSettingsContext;\r\n  \r\n        constructor() {\r\n          super();\r\n      \r\n          this.consumeContext(JUMOO_TM_CONNECTOR_SETTINGS_CONTEXT, (_context) => {\r\n            this.#context = _context;\r\n          });\r\n        }\r\n\r\n        async connectedCallback() {\r\n          super.connectedCallback();\r\n\r\n          const models = await openAiTranslateModels();\r\n          console.log(models);\r\n\r\n        }\r\n\r\n        render(){\r\n            return html`\r\n          <umb-body-layout>\r\n            <div class=\"layout\">\r\n              <div class=\"left\">\r\n                <uui-box>\r\n                    <p>\r\n                        In order to use the OpenAi Translation API, you will need to\r\n                        supply an API Key.\r\n                    </p>\r\n                </uui-box>\r\n                <uui-box headline=\"OpenAi Translatation Api\">\r\n                    ${this.renderApiKey()} ${this.renderThrottle()}\r\n                    ${this.renderSplitOption()} ${this.renderSendAsHtmlOption()}\r\n                </uui-box>\r\n                <uui-box>\r\n                  ${this.renderService()}\r\n                  ${this.renderModel()}${this.renderMaxTokens()}\r\n                  ${this.renderTemperature()}${this.renderFrequencyPenalty()}\r\n                  ${this.renderPresencePenalty()}${this.renderNucleusSamplingFactor()}\r\n                </uui-box>\r\n              </div>\r\n            </div>\r\n          </umb-body-layout>`\r\n        }\r\n\r\n        renderApiKey() {\r\n          return html` <umb-property-layout\r\n            label=\"Api Key\"\r\n            description=\"OpenAi Translation Api Key\"\r\n            ><div slot=\"editor\">\r\n              <uui-input\r\n                id=\"apiKey\"\r\n                label=\"ApiKey\"\r\n                .value=${(this.settings?.apiKey as string) ?? \"\"}\r\n                @change=${this.onUpdateOption}\r\n              ></uui-input>\r\n            </div>\r\n          </umb-property-layout>`;\r\n        }\r\n  \r\n        renderThrottle() {\r\n          const throttle = this.settings?.throttle || 250;\r\n      \r\n          return html` <umb-property-layout\r\n            label=\"Throttle\"\r\n            description=\"Number of milliseconds to wait between calls (To Avoid API Throttling)\"\r\n          >\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n                id=\"throttle\"\r\n                value=${throttle}\r\n                label=\"throttle (ms)\"\r\n                @change=${this.onUpdateOption}\r\n              ></uui-input>\r\n            </div>\r\n          </umb-property-layout>`;\r\n        }\r\n  \r\n        renderSplitOption() {\r\n          return html` <umb-property-layout\r\n            label=\"Split\"\r\n            description=\"Split any HTML before sending to translation\"\r\n          >\r\n            <div slot=\"editor\">\r\n              <uui-checkbox\r\n                label=\"Split Html\"\r\n                id=\"split\"\r\n                .checked=${(this.settings?.split as boolean) ?? false}\r\n                @change=${this.onUpdateOption}\r\n              >\r\n              </uui-checkbox>\r\n            </div>\r\n          </umb-property-layout>`;\r\n        }\r\n  \r\n        renderSendAsHtmlOption() {\r\n          return html` <umb-property-layout\r\n            label=\"Send as HTML\"\r\n            description=\"Make sure html elments are marked as html when sent to translation\"\r\n          >\r\n            <div slot=\"editor\">\r\n              <uui-checkbox\r\n                id=\"asHtml\"\r\n                label=\"Send as HTML\"\r\n                .checked=${(this.settings?.asHtml as boolean) ?? false}\r\n                @change=${this.onUpdateOption}\r\n              >\r\n              </uui-checkbox>\r\n            </div>\r\n          </umb-property-layout>`;\r\n        }\r\n\r\n        renderService(){\r\n          const options: Array<Option> = [\r\n            { name: 'Carrot', value: 'orange' },\r\n            { name: 'Cucumber', value: 'green' },\r\n            { name: 'Aubergine', value: 'purple' },\r\n            { name: 'Blueberry', value: 'Blue' },\r\n            { name: 'Banana', value: 'yellow' },\r\n            { name: 'Strawberry', value: 'red' },];\r\n\r\n          return html`<umb-property-layout\r\n          label=\"OpenAi Library\"\r\n          description=\"Choose which API Library to use when sending translations\">\r\n            <div slot=\"editor\">\r\n             <uui-select\r\n             placeholder=\"Select an option\"\r\n             .options=${options}\r\n             @change=${this.onUpdateOption}></uui-select>\r\n            </div></umb-property-layout>`\r\n        }\r\n\r\n        renderModel(){\r\n          return html`<umb-property-layout\r\n          label=\"Model\"\r\n          description=\"OpenAi Model to use to translation\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"model\"\r\n              label=\"Model\"\r\n              value=${(this.settings?.model as string) ?? \"gpt-3.5-turbo-instruct\"}\r\n              @change=${this.onUpdateOption}>\r\n              </uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        renderMaxTokens(){\r\n          return html`<umb-property-layout\r\n          label=\"Max Tokens\"\r\n          description=\"The maximum number of tokens to generate in the completion.\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"maxTokens\"\r\n              label=\"MaxTokens\"\r\n              type=\"number\"\r\n              value=${(this.settings?.maxTokens as number) ?? 500}\r\n              @change=${this.onUpdateOption}>\r\n              </uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        renderTemperature(){\r\n          return html`<umb-property-layout\r\n          label=\"Temperature\"\r\n          description=\"Sampling temperature\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"temperature\"\r\n              label=\"Temperature\"\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              value=${(this.settings?.temperature as number) ?? 0.0}\r\n              @change=${this.onUpdateOption}>\r\n            </uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        renderFrequencyPenalty(){\r\n          return html`<umb-property-layout\r\n          label=\"Frequency Penalty\"\r\n          description=\"Positive values penalize new tokens based on their existing frequency in the text so far\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"frequencyPenalty\"\r\n              label=\"FrequencyPenalty\"\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              value=${(this.settings?.frequencyPenalty as number) ?? 0.0}\r\n              @change=${this.onUpdateOption}>\r\n            </uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        renderPresencePenalty(){\r\n          return html`<umb-property-layout\r\n          label=\"Presence Penalty\"\r\n          description=\"Positive values penalize new tokens based on their existing frequency in the text so far\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"presencePenalty\"\r\n              label=\"PresencePenalty\"\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              value=${(this.settings?.presencePenalty as number) ?? 0.0}\r\n              @change=${this.onUpdateOption}>\r\n            </uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        renderNucleusSamplingFactor(){\r\n          return html`<umb-property-layout\r\n          label=\"Nucleus sampling\"\r\n          description=\"\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"nucleusSampling\"\r\n              label=\"NucleusSampling\"\r\n              type=\"number\"\r\n              value=${(this.settings?.nucleusSampling as number) ?? 1}\r\n              @change=${this.onUpdateOption}>\r\n            </uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        static styles = css`\r\n        .layout {\r\n            display: flex;\r\n            gap: var(--uui-size-space-5);\r\n        }\r\n\r\n        .left, .right {\r\n            display: flex;\r\n            flex-direction: column;\r\n            flex-grow: 1;\r\n            gap: var(--uui-size-space-5);\r\n        }\r\n        \r\n        .right {\r\n          flex-basis: 30%;\r\n          max-width: 325px;\r\n        }\r\n\r\n        @media screen and (max-width: 1280px) {\r\n          .layout{\r\n            flex-direction: column;\r\n          }\r\n          .layout > div{\r\n            max-width: 100%;\r\n          }\r\n        }\r\n\r\n        uui-input,\r\n        uui-select {\r\n            width: 100%;\r\n        }\r\n    `;\r\n    }\r\n\r\nexport default TranslationOpenAiConnectorConfigElement;"],"names":["ApiError","request","response","message","CancelError","CancelablePromise","executor","resolve","reject","onResolve","value","onReject","reason","onCancel","cancelHandler","onFulfilled","onRejected","onFinally","error","isString","isStringWithValue","isBlob","isFormData","base64","str","getQueryString","params","qs","append","key","encodePair","v","k","getUrl","config","options","encoder","path","substring","group","_a","url","getFormData","formData","process","resolver","getHeaders","token","username","password","additionalHeaders","headers","credentials","getRequestBody","_b","sendRequest","body","controller","fn","getResponseHeader","responseHeader","content","getResponseBody","contentType","binaryTypes","type","catchErrorCodes","result","errorStatus","errorStatusText","errorBody","responseBody","transformedBody","openAiTranslateModels","__request","OpenAPI","_context","TranslationOpenAiConnectorConfigElement","TranslationConnectorConfigElementBase","__privateAdd","JUMOO_TM_CONNECTOR_SETTINGS_CONTEXT","__privateSet","models","html","throttle","css","__decorateClass","customElement","TranslationOpenAiConnectorConfigElement$1"],"mappings":"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"}