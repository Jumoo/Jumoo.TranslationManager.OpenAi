{"version":3,"file":"config.view-D0AuPmX5.js","sources":["../../../../openai-client/src/views/config.view.ts"],"sourcesContent":["import { JUMOO_TM_CONNECTOR_SETTINGS_CONTEXT, TranslationConnectorConfigElement, TranslationConnectorConfigElementBase, TranslationConnectorSettingsContext } from \"@jumoo/translate\";\r\nimport { css, customElement, html } from \"@umbraco-cms/backoffice/external/lit\";\r\n\r\n@customElement(\"jumoo-openai-config\")\r\nexport class TranslationOpenAiConnectorConfigElement \r\n    extends TranslationConnectorConfigElementBase\r\n    implements TranslationConnectorConfigElement \r\n    {    \r\n        #context?: TranslationConnectorSettingsContext;\r\n  \r\n        constructor() {\r\n          super();\r\n      \r\n          this.consumeContext(JUMOO_TM_CONNECTOR_SETTINGS_CONTEXT, (_context) => {\r\n            this.#context = _context;\r\n          });\r\n        }\r\n        render(){\r\n            return html`\r\n          <umb-body-layout>\r\n            <div class=\"layout\">\r\n              <div class=\"left\">\r\n                <uui-box>\r\n                    <p>\r\n                        In order to use the OpenAi Translation API, you will need to\r\n                        supply an API Key.\r\n                    </p>\r\n                </uui-box>\r\n                <uui-box headline=\"OpenAi Translatation Api\">\r\n                    ${this.renderApiKey()} ${this.renderThrottle()}\r\n                    ${this.renderSplitOption()} ${this.renderSendAsHtmlOption()}\r\n                </uui-box>\r\n                <uui-box>\r\n                  ${this.renderService()}\r\n                  ${this.renderModel()}${this.renderMaxTokens()}\r\n                  ${this.renderTemperature()}${this.renderFrequencyPenalty()}\r\n                  ${this.renderPresencePenalty()}${this.renderNucleusSamplingFactor()}\r\n                </uui-box>\r\n              </div>\r\n            </div>\r\n          </umb-body-layout>`\r\n        }\r\n\r\n        renderApiKey() {\r\n          return html` <umb-property-layout\r\n            label=\"Api Key\"\r\n            description=\"OpenAi Translation Api Key\"\r\n            ><div slot=\"editor\">\r\n              <uui-input\r\n                id=\"apiKey\"\r\n                label=\"ApiKey\"\r\n                .value=${(this.settings?.apiKey as string) ?? \"\"}\r\n                @change=${this.onUpdateOption}\r\n              ></uui-input>\r\n            </div>\r\n          </umb-property-layout>`;\r\n        }\r\n  \r\n        renderThrottle() {\r\n          const throttle = this.settings?.throttle || 250;\r\n      \r\n          return html` <umb-property-layout\r\n            label=\"Throttle\"\r\n            description=\"Number of milliseconds to wait between calls (To Avoid API Throttling)\"\r\n          >\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n                id=\"throttle\"\r\n                value=${throttle}\r\n                label=\"throttle (ms)\"\r\n                @change=${this.onUpdateOption}\r\n              ></uui-input>\r\n            </div>\r\n          </umb-property-layout>`;\r\n        }\r\n  \r\n        renderSplitOption() {\r\n          return html` <umb-property-layout\r\n            label=\"Split\"\r\n            description=\"Split any HTML before sending to translation\"\r\n          >\r\n            <div slot=\"editor\">\r\n              <uui-checkbox\r\n                label=\"Split Html\"\r\n                id=\"split\"\r\n                .checked=${(this.settings?.split as boolean) ?? false}\r\n                @change=${this.onUpdateOption}\r\n              >\r\n              </uui-checkbox>\r\n            </div>\r\n          </umb-property-layout>`;\r\n        }\r\n  \r\n        renderSendAsHtmlOption() {\r\n          return html` <umb-property-layout\r\n            label=\"Send as HTML\"\r\n            description=\"Make sure html elments are marked as html when sent to translation\"\r\n          >\r\n            <div slot=\"editor\">\r\n              <uui-checkbox\r\n                id=\"asHtml\"\r\n                label=\"Send as HTML\"\r\n                .checked=${(this.settings?.asHtml as boolean) ?? false}\r\n                @change=${this.onUpdateOption}\r\n              >\r\n              </uui-checkbox>\r\n            </div>\r\n          </umb-property-layout>`;\r\n        }\r\n\r\n        renderService(){\r\n          const options: Array<Option> = [\r\n            { name: 'Carrot', value: 'orange' },\r\n            { name: 'Cucumber', value: 'green' },\r\n            { name: 'Aubergine', value: 'purple' },\r\n            { name: 'Blueberry', value: 'Blue' },\r\n            { name: 'Banana', value: 'yellow' },\r\n            { name: 'Strawberry', value: 'red' },];\r\n\r\n          return html`<umb-property-layout\r\n          label=\"OpenAi Library\"\r\n          description=\"Choose which API Library to use when sending translations\">\r\n            <div slot=\"editor\">\r\n             <uui-select\r\n             placeholder=\"Select an option\"\r\n             .options=${options}></uui-select>\r\n            </div></umb-property-layout>`\r\n        }\r\n\r\n        renderModel(){\r\n          return html`<umb-property-layout\r\n          label=\"Model\"\r\n          description=\"OpenAi Model to use to translation\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"model\"\r\n              label=\"Model\"\r\n              value=${(this.settings?.model as string) ?? \"text-davinci-003\"}>\r\n              </uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        renderMaxTokens(){\r\n          return html`<umb-property-layout\r\n          label=\"Max Tokens\"\r\n          description=\"The maximum number of tokens to generate in the completion.\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"maxTokens\"\r\n              label=\"MaxTokens\"\r\n              type=\"number\"\r\n              value=${(this.settings?.maxTokens as number) ?? 500}>\r\n              </uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        renderTemperature(){\r\n          return html`<umb-property-layout\r\n          label=\"Temperature\"\r\n          description=\"Sampling temperature\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"temperature\"\r\n              label=\"Temperature\"\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              value=${(this.settings?.temperature as number) ?? 0.0}></uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        renderFrequencyPenalty(){\r\n          return html`<umb-property-layout\r\n          label=\"Frequency Penalty\"\r\n          description=\"Positive values penalize new tokens based on their existing frequency in the text so far\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"frequencyPenalty\"\r\n              label=\"FrequencyPenalty\"\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              value=${(this.settings?.frequencyPenalty as number) ?? 0.0}></uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        renderPresencePenalty(){\r\n          return html`<umb-property-layout\r\n          label=\"Presence Penalty\"\r\n          description=\"Positive values penalize new tokens based on their existing frequency in the text so far\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"presencePenalty\"\r\n              label=\"PresencePenalty\"\r\n              type=\"number\"\r\n              step=\"0.1\"\r\n              value=${(this.settings?.presencePenalty as number) ?? 0.0}></uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        renderNucleusSamplingFactor(){\r\n          return html`<umb-property-layout\r\n          label=\"Nucleus sampling\"\r\n          description=\".\">\r\n            <div slot=\"editor\">\r\n              <uui-input\r\n              id=\"nucleusSampling\"\r\n              label=\"NucleusSampling\"\r\n              type=\"number\"\r\n              value=${(this.settings?.nucleusSampling as number) ?? 1}></uui-input>\r\n            </div>\r\n          </umb-property-layout>`\r\n        }\r\n\r\n        static styles = css`\r\n        .layout {\r\n            display: flex;\r\n            gap: var(--uui-size-space-5);\r\n        }\r\n\r\n        .left, .right {\r\n            display: flex;\r\n            flex-direction: column;\r\n            flex-grow: 1;\r\n            gap: var(--uui-size-space-5);\r\n        }\r\n        \r\n        .right {\r\n          flex-basis: 30%;\r\n          max-width: 325px;\r\n        }\r\n\r\n        @media screen and (max-width: 1280px) {\r\n          .layout{\r\n            flex-direction: column;\r\n          }\r\n          .layout > div{\r\n            max-width: 100%;\r\n          }\r\n        }\r\n\r\n        uui-input,\r\n        uui-select {\r\n            width: 100%;\r\n        }\r\n    `;\r\n    }\r\n\r\nexport default TranslationOpenAiConnectorConfigElement;"],"names":["_context","TranslationOpenAiConnectorConfigElement","TranslationConnectorConfigElementBase","__privateAdd","JUMOO_TM_CONNECTOR_SETTINGS_CONTEXT","__privateSet","html","_a","throttle","css","__decorateClass","customElement","TranslationOpenAiConnectorConfigElement$1"],"mappings":"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"}