{"version":3,"file":"index-CPgL5ne9.js","sources":["../../../../openai-client/src/connector.ts","../../../../openai-client/src/views/manifest.ts","../../../../openai-client/src/icons/manifest.ts","../../../../openai-client/src/api/core/OpenAPI.ts","../../../../openai-client/src/index.ts"],"sourcesContent":["import { ManifestTranslationConnector } from \"@jumoo/translate\";\r\n\r\nexport const connector: ManifestTranslationConnector = {\r\n    type: \"jumoo-tm-connector\",\r\n    alias: \"jumoo-tm-openai-connector\",\r\n    name: \"OpenAi Connector\",\r\n    meta: {\r\n      icon: \"jumoo-tm-openai-logo\",\r\n      label: \"OpenAi connector\",\r\n      alias: \"openAiConnector\",\r\n    },\r\n  };  ","import {\r\n    ManifestTranslationConnectorConfig,\r\n    ManifestTranslationConnectorPending,\r\n  } from \"@jumoo/translate\";\r\n  \r\n  const connectorConfig: ManifestTranslationConnectorConfig = {\r\n    type: \"jumoo-tm-connector-config\",\r\n    alias: \"jumoo-openai-config\",\r\n    name: \"OpenAi Connector Config\",\r\n    elementName: \"jumoo-openai-config\",\r\n    js: () => import(\"./config.view.js\"),\r\n  };\r\n  \r\n  const connectorPending: ManifestTranslationConnectorPending = {\r\n    type: \"jumoo-tm-connector-pending\",\r\n    alias: \"jumoo-openai-pending\",\r\n    name: \"OpenAi Connector Pending\",\r\n    elementName: \"jumoo-openai-pending\",\r\n    js: () => import(\"./pending.view.js\"),\r\n  };\r\n  \r\n  export const manifests = [connectorConfig, connectorPending];","const icons: UmbExtensionManifest = {\r\n\ttype: 'icons',\r\n\talias: 'jumoo.tm.icons.openai',\r\n\tname: 'Translation Manager OpenAi Icon',\r\n\tjs: () => import('./icons.js'),\r\n};\r\n\r\nexport const manifests = [icons];","import type { ApiRequestOptions } from \"./ApiRequestOptions\";\n\ntype Headers = Record<string, string>;\ntype Middleware<T> = (value: T) => T | Promise<T>;\ntype Resolver<T> = (options: ApiRequestOptions<T>) => Promise<T>;\n\nexport class Interceptors<T> {\n  _fns: Middleware<T>[];\n\n  constructor() {\n    this._fns = [];\n  }\n\n  eject(fn: Middleware<T>): void {\n    const index = this._fns.indexOf(fn);\n    if (index !== -1) {\n      this._fns = [...this._fns.slice(0, index), ...this._fns.slice(index + 1)];\n    }\n  }\n\n  use(fn: Middleware<T>): void {\n    this._fns = [...this._fns, fn];\n  }\n}\n\nexport type OpenAPIConfig = {\n  BASE: string;\n  CREDENTIALS: \"include\" | \"omit\" | \"same-origin\";\n  ENCODE_PATH?: ((path: string) => string) | undefined;\n  HEADERS?: Headers | Resolver<Headers> | undefined;\n  PASSWORD?: string | Resolver<string> | undefined;\n  TOKEN?: string | Resolver<string> | undefined;\n  USERNAME?: string | Resolver<string> | undefined;\n  VERSION: string;\n  WITH_CREDENTIALS: boolean;\n  interceptors: {\n    request: Interceptors<RequestInit>;\n    response: Interceptors<Response>;\n  };\n};\n\nexport const OpenAPI: OpenAPIConfig = {\n  BASE: \"\",\n  CREDENTIALS: \"include\",\n  ENCODE_PATH: undefined,\n  HEADERS: undefined,\n  PASSWORD: undefined,\n  TOKEN: undefined,\n  USERNAME: undefined,\n  VERSION: \"Latest\",\n  WITH_CREDENTIALS: false,\n  interceptors: {\n    request: new Interceptors(),\n    response: new Interceptors(),\n  },\n};\n","import { UmbEntryPointOnInit } from \"@umbraco-cms/backoffice/extension-api\";\r\nimport { connector } from \"./connector\";\r\n\r\nimport { manifests as views } from \"./views/manifest\";\r\nimport { manifests as icons } from './icons/manifest.js';\r\nimport { UMB_AUTH_CONTEXT } from \"@umbraco-cms/backoffice/auth\";\r\nimport { OpenAPI } from \"./api/index.js\";\r\n\r\nexport const onInit: UmbEntryPointOnInit = (_host, extensionRegistry) => {\r\n    extensionRegistry.registerMany([connector,  \r\n      ...icons,\r\n      ...views, \r\n      //...localizations\r\n      ]);\r\n      _host.consumeContext(UMB_AUTH_CONTEXT, (_auth) => {\r\n        const umbOpenApi = _auth.getOpenApiConfiguration();\r\n        OpenAPI.TOKEN = umbOpenApi.token;\r\n        OpenAPI.BASE = umbOpenApi.base;\r\n        OpenAPI.WITH_CREDENTIALS = umbOpenApi.withCredentials;\r\n      });\r\n}"],"names":["connector","connectorConfig","connectorPending","manifests","icons","Interceptors","fn","index","OpenAPI","onInit","_host","extensionRegistry","views","UMB_AUTH_CONTEXT","_auth","umbOpenApi"],"mappings":";AAEO,MAAMA,IAA0C;AAAA,EACnD,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,EAAA;AAEX,GCNMC,IAAsD;AAAA,EAC1D,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AAAA,EACb,IAAI,MAAM,OAAO,2BAAkB;AACrC,GAEMC,IAAwD;AAAA,EAC5D,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,aAAa;AAAA,EACb,IAAI,MAAM,OAAO,4BAAmB;AACtC,GAEaC,IAAY,CAACF,GAAiBC,CAAgB,GCrBvDE,IAA8B;AAAA,EACnC,MAAM;AAAA,EACN,OAAO;AAAA,EACP,MAAM;AAAA,EACN,IAAI,MAAM,OAAO,qBAAY;AAC9B,GAEaD,IAAY,CAACC,CAAK;ACDxB,MAAMC,EAAgB;AAAA,EAG3B,cAAc;AACZ,SAAK,OAAO,CAAC;AAAA,EAAA;AAAA,EAGf,MAAMC,GAAyB;AAC7B,UAAMC,IAAQ,KAAK,KAAK,QAAQD,CAAE;AAClC,IAAIC,MAAU,OACZ,KAAK,OAAO,CAAC,GAAG,KAAK,KAAK,MAAM,GAAGA,CAAK,GAAG,GAAG,KAAK,KAAK,MAAMA,IAAQ,CAAC,CAAC;AAAA,EAC1E;AAAA,EAGF,IAAID,GAAyB;AAC3B,SAAK,OAAO,CAAC,GAAG,KAAK,MAAMA,CAAE;AAAA,EAAA;AAEjC;AAkBO,MAAME,IAAyB;AAAA,EACpC,MAAM;AAAA,EACN,aAAa;AAAA,EACb,aAAa;AAAA,EACb,SAAS;AAAA,EACT,UAAU;AAAA,EACV,OAAO;AAAA,EACP,UAAU;AAAA,EACV,SAAS;AAAA,EACT,kBAAkB;AAAA,EAClB,cAAc;AAAA,IACZ,SAAS,IAAIH,EAAa;AAAA,IAC1B,UAAU,IAAIA,EAAa;AAAA,EAAA;AAE/B,GC/CaI,IAA8B,CAACC,GAAOC,MAAsB;AACrE,EAAAA,EAAkB,aAAa;AAAA,IAACX;AAAA,IAC9B,GAAGI;AAAAA,IACH,GAAGQ;AAAAA;AAAAA,EAAA,CAEF,GACKF,EAAA,eAAeG,GAAkB,CAACC,MAAU;AAC1C,UAAAC,IAAaD,EAAM,wBAAwB;AACjD,IAAAN,EAAQ,QAAQO,EAAW,OAC3BP,EAAQ,OAAOO,EAAW,MAC1BP,EAAQ,mBAAmBO,EAAW;AAAA,EAAA,CACvC;AACP;"}